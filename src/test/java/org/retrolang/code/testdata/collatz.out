 1: i1 ← 0;                                                 // count = 0
=2: test i0 == 1; T:→ 8                                     // if n == 1 {
 3: test iMod(i0, 2) == 0; F:→ 5                            // n = (n % 2 == 0) ? n / 2 : 3 * n + 1
 4: i0 ← iDiv(i0, 2); → 6
-5: i0 ← iAdd(iMul(3, i0), 1);
-6: i1 ← iAdd(i1, 1);                                       // count += 1
 7: back0 → 2 with i0, i1                                   // }
-8: return i1                                               // return count
---
 1: I1 ← 0;                                                 // count = 0
=2: test I0 == 1; T:→ 7                                     // if n == 1 {
 3: test iMod(I0, 2) == 0; F:→ 6                            // n = (n % 2 == 0) ? n / 2 : 3 * n + 1
 4: I0 ← iDiv(I0, 2);
=5: I1 ← iAdd(I1, 1); → 2                                   // count += 1
-6: I0 ← iAdd(iMul(3, I0), 1); → 5                          // n = (n % 2 == 0) ? n / 2 : 3 * n + 1
-7: return I1                                               // return count
---
No constants
---
  public static collatz(I)I
   L0
    LINENUMBER 1 L0
    ICONST_0
    ISTORE 1
   L1
    LINENUMBER 2 L1
   FRAME APPEND [I]
    ILOAD 0
    ICONST_1
    IF_ICMPEQ L2
   L3
    LINENUMBER 3 L3
    ILOAD 0
    ICONST_2
    IREM
    IFNE L4
   L5
    LINENUMBER 4 L5
    ILOAD 0
    ICONST_2
    IDIV
    ISTORE 0
   L6
    LINENUMBER 5 L6
   FRAME SAME
    ILOAD 1
    ICONST_1
    IADD
    ISTORE 1
    GOTO L1
   L4
    LINENUMBER 6 L4
   FRAME SAME
    ICONST_3
    ILOAD 0
    IMUL
    ICONST_1
    IADD
    ISTORE 0
    GOTO L6
   L2
    LINENUMBER 7 L2
   FRAME FULL [T I] []
    ILOAD 1
    IRETURN
    MAXSTACK = 2
    MAXLOCALS = 2

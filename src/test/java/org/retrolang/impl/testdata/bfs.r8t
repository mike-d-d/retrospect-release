m1 = matrix([10, 10], [
  1, 0, 1, 1, 1, 0, 1, 0, 1, 0,
  1, 0, 1, 0, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 0, 1, 0, 0, 1, 0, 1,
  0, 1, 0, 0, 1, 0, 1, 1, 0, 1,
  1, 1, 1, 0, 1, 0, 0, 1, 0, 1,
  0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 0, 0, 0, 0, 1, 0, 1,
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 0, 0, 1, 0, 0, 0, 0, 0, 0,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1
])

m2 = matrix([10, 10], [
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1
])
start = [1, 1]
end = [10, 10]
return [bfs(m1, start, end), bfs(m2, start, end)]

function bfs (m, start, end) {
  [h, w] = sizes(m)
  frontier = [start]  // the set of points on the exploration frontier
  visited = newMatrix([h, w], None)  // each cell will point to its predecessor
  visited @ start = start
  ds = [[-1, 0], [1, 0], [0, -1], [0, 1]]  // Delta vectors to neighbors.

  for sequential frontier, visited {
    if size(frontier) == 0 { break { return [] }}
    // for each endpoint e in frontier
    for e in frontier {
      // are we done?
      if e[1] == end[1] and e[2] == end[2] {
        path = [e]
        for sequential path, e {
          e = visited @ e
          path[1..0] = [e]
          if e[1] == start[1] and e[2] == start[2] {
            break { break { break { return path }}}
          }
        }
      }
      // Emit each valid, unvisited, traversible neighbor of e
      nextHops <<^
          ds | d -> (e + d | save)
             | filter(n -> (n[1] > 0 and n[1] <= h and n[2] > 0 and n[2] <= w
                            and (visited @ n) is None and (m @ n) == 1))
             | n -> [e, n]
    } collect {
      nextHops =| saveUnordered
    }
    frontier = []
    for [from, to] in nextHops sequential visited, frontier {
      if (visited @ to) is None {
        visited @ to = from
        frontier &= [to]
      }
    }
  }
}

/* RUN () RETURNS
  [[[1, 1], [2, 1], [3, 1], [3, 2], [3, 3], [2, 3], [1, 3], [1, 4], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [6, 6], [6, 7], [6, 8], [7, 8], [8, 8], [8, 7], [8, 6], [8, 5], [8, 4], [9, 4], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [10, 10]], [[1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [8, 1], [9, 1], [10, 1], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [10, 10]]]
---
allocated=3679744/139667, peak=288
$0 = *[]b0⸨0:[b1, b2]; 1:None⸩
$1 = *[][[b0, b1], [b2, b3]]
$2 = *[][b0, b1]
$3 = *[][b0, b1]
$4 = *[]b0
*/

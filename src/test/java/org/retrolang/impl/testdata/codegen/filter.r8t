return [filtered([0.01, 4, 0.09]), filtered([1, 0.04, 9])]

function filtered(nums) {
  r = sqrt(^nums) | filter(-> # < 1)
  return [r[1], r[2], r[3]]
}

/* CODEGEN filtered RETURNS
[[0.1, Absent, 0.3], [Absent, 0.2, Absent]]
---
filtered_0([d1, d2, d3]):
  1: AtomicInteger.incrementAndGet(0);
  2: D7 ← Math.sqrt(D1);
  3: test Double.isNaN(D7) == 0; F:→ 29
  4: test D7 < 1; F:→ 23
  5: I9 ← 0;
= 6: D10 ← Math.sqrt(D3);
  7: test Double.isNaN(D10) == 0; F:→ 29
  8: test D10 < 1; F:→ 25
  9: I12 ← 0;
=10: D13 ← Math.sqrt(D5);
 11: test Double.isNaN(D13) == 0; F:→ 29
 12: test D13 < 1; F:→ 27
 13: I1 ← 0;
=14: TState.setResultTemplates(X0, [[i0⸨0:d8; 1:Absent⸩, i4⸨0:d16; 1:Absent⸩, i24⸨0:d32; 1:Absent⸩]]);
 15: X0 ← TState.fnResultBytes(X0, 40);
 16: setDouble[](X0, 8, D7);
 17: setDouble[](X0, 16, D10);
 18: setDouble[](X0, 32, D13);
 19: setInt[](X0, 0, I9);
 20: setInt[](X0, 4, I12);
 21: setInt[](X0, 24, I1);
 22: return
-23: D7 ← 0;
 24: I9 ← 1; → 6
-25: D10 ← 0;
 26: I12 ← 1; → 10
-27: D13 ← 0;
 28: I1 ← 1; → 14
-29: X7 ← newStackEntry(filter.r8t+0:4_0 _t0 = pipe(nums, `sqrt:1`) {nums=[D1, D3, D5]});
 30: X1 ← TState.fillStackEntry(X0, null, X7, [⸨d0; Absent⸩, ⸨d0; Absent⸩, ⸨d0; Absent⸩], mMemo_x@xxxx, null);
 31: TState.setStackRest(X0, X1);
 32: return
---
allocated=336/13, peak=232
*/
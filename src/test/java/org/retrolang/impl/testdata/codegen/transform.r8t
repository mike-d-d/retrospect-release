return [transform([1, 10], "a"),
        transform([1e5, 1e6], "b"),
        transform([0.1, 1], False)]

function transform(nums, tag) {
  f = nums | x -> sqrt(x) | x -> log10(x)
  return [f[1], f[2], tag]
}

/* CODEGEN transform RETURNS
[[0, 0.5, "a"], [2.5, 3, "b"], [-0.5, 0, False]]
---
transform_0([d1, i2], ⸨False; x3:String⸩):
  1: AtomicInteger.incrementAndGet(0);
  2: D5 ← Math.sqrt(D1);
  3: test Double.isNaN(D5) == 0; F:→ 17
  4: D5 ← Math.log10(D5);
  5: test Double.isNaN(D5) == 0; F:→ 17
  6: D7 ← Math.sqrt(I3);
  7: test Double.isNaN(D7) == 0; F:→ 17
  8: D7 ← Math.log10(D7);
  9: test Double.isNaN(D7) == 0; F:→ 17
 10: TState.setResultTemplates(X0, [[d0, d8, ⸨False; x0:String⸩]]);
 11: X1 ← TState.fnResults(X0, 1);
 12: X0 ← TState.fnResultBytes(X0, 16);
 13: setDouble[](X0, 0, D5);
 14: setDouble[](X0, 8, D7);
 15: setObject[](X1, 0, X4);
 16: return
-17: X5 ← newStackEntry(transform.r8t+0:6_0 _t0 = pipe(nums, lambda@6:15) {nums=[D1, I3], tag=⸨False; X4⸩});
 18: X1 ← TState.fillStackEntry(X0, null, X5, [d0, d0, ⸨False; x0:String⸩], mMemo_x@xxxx, null);
 19: TState.setStackRest(X0, X1);
 20: return
---
allocated=496/19, peak=368
*/
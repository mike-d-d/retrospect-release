tree = Empty
nextValue = 1
for depth in 0..5 sequential tree, nextValue {
  size = 2 ** depth
  start = 0.5 / size
  for i in 1..size sequential tree, nextValue {
    tree[start * (2 * i - 1)] = nextValue
    nextValue += 1
  }
}
tree[19/32] = 1
return [tree[17/32], tree[18/32], tree[19/32], tree[1]]

type BST
compound NonEmpty is BST
singleton Empty is BST

method at(BST bst, [key]) {
  if bst is Empty {
    return Absent
  }
  rootKey = bst_.key
  if key < rootKey {
    return bst_.left[key]
  } else if key > rootKey {
    return bst_.right[key]
  } else {
    return bst_.value
  }
}

method replaceElement(BST bst, [key], value) {
  if bst is Empty {
    return NonEmpty_({key, value, left: Empty, right: Empty})
  }
  rootKey = bst_.key
  if key < rootKey {
    bst_.left[key] = value
  } else if key > rootKey {
    bst_.right[key] = value
  } else {
    bst_.value = value
  }
  return bst
}

/* CODEGEN at RETURNS
  [24, 12, 1, Absent]
---
at_0(i1⸨0:NonEmpty(Struct(["key", "left", "right", "value"], x2:*@xxxx)); 1:Empty⸩, [d3]):
  1: AtomicInteger.incrementAndGet(0);
  2: X5 ← null;
  3: test I1 1 (< 2); T:→ 22
  4: test X2 is *[d4, b0⸨0:NonEmpty(Struct(["key", "left", "right", "value"], x0:*@xxxx)); 1:Empty⸩, b1⸨0:NonEmpty(Struct(["key", "left", "right", "value"], x1:*@xxxx)); 1:Empty⸩, b2]@xxxx; F:→ 38
  5: D6 ← Frame3i2x.d0(X2);
  6: test D3 < D6; F:→ 24
  7: test Frame3i2x.b0(X2) == 0; F:→ 38
  8: [i0⸨0:i4; 1:Absent⸩] ← at_0(X0, 0, Frame3i2x.x0.getValue(X2), D3); X1 ← stackRest; unwind:→ 37
  9: X2 ← TState.fnResultBytes(X0, 0);
 10: test int[](X2, 0) == 0; F:→ 37
 11: I3 ← int[](X2, 4);
 12: TState.clearResultTemplates(X0);
 13: test X1 == null; T:→ 15
 14: X5 ← TState.fillStackEntry(X0, X1, search_tree.r8t+0:24_10 _t0 = at(_t0, [key]), ⸨b0; Absent⸩, mMemo_x@xxxx, null);
-15: I4 ← 0;
=16: TState.setResultTemplates(X0, [i0⸨0:i4; 1:Absent⸩]);
 17: X2 ← TState.fnResultBytes(X0, 8);
 18: setInt[](X2, 4, I3);
 19: setInt[](X2, 0, I4);
 20: TState.setStackRest(X0, X5);
 21: return
-22: I3 ← 0;
 23: I4 ← 1; → 16
-24: test D6 < D3; F:→ 32
 25: [i0⸨0:i4; 1:Absent⸩] ← at_0(X0, Frame3i2x.b1(X2), Frame3i2x.x1.getValue(X2), D3); X1 ← stackRest; unwind:→ 34
 26: X2 ← TState.fnResultBytes(X0, 0);
 27: I3 ← int[](X2, 4);
 28: I4 ← int[](X2, 0);
 29: TState.clearResultTemplates(X0);
 30: test X1 == null; T:→ 16
 31: X5 ← TState.fillStackEntry(X0, X1, search_tree.r8t+0:26_17 _t0 = at(_t0, [key]), ⸨b0; Absent⸩, mMemo_x@xxxx, null); → 16
-32: I4 ← 0;
 33: I3 ← Frame3i2x.b2(X2); → 16
-34: X5 ← TState.fillStackEntry(X0, X1, search_tree.r8t+0:26_17 _t0 = at(_t0, [key]), ⸨b0; Absent⸩, mMemo_x@xxxx, null);
=35: TState.setStackRest(X0, X5);
 36: return
-37: X5 ← TState.fillStackEntry(X0, X1, search_tree.r8t+0:24_10 _t0 = at(_t0, [key]), ⸨b0; Absent⸩, mMemo_x@xxxx, null); → 35
-38: X1 ← newStackEntry(search_tree.r8t+0:18_0 key = unarray1(_a0) {bst=NonEmpty(Struct(["key", "left", "right", "value"], X2)), _a0=[D3]});
 39: X5 ← TState.fillStackEntry(X0, null, X1, ⸨b0; Absent⸩, mMemo_x@xxxx, null); → 35
---
allocated=215448/8197, released=212928/8134, peak=2576
*/
  1: test i0 < 0; F:→ 3                                      // if n < 0 {
  2: i0 ← iNeg(i0);                                          // n = -n
- 3: i1 ← 1;                                                 // i = 1
= 4: i1 ← iAdd(i1, 1);                                       // i += 1
  5: test 0 < i1; F:→ 8                                      // if i <= 0 or i > n {
  6: test i0 < i1; T:→ 8
  7: back0 → 4 with i1                                       // }
- 8: test 10 < i0; T:→ 10                                    // if n > 10 {
  9: return i1                                               // return i
-10: return i0                                               // return n
---
 1: test I0 < 0; F:→ 3                                      // if n < 0 {
 2: I0 ← iNeg(I0);                                          // n = -n
-3: I1 ← 1;                                                 // i = 1
=4: I1 ← iAdd(I1, 1);                                       // i += 1
 5: test 0 < I1; F:→ 7                                      // if i <= 0 or i > n {
 6: test I0 < I1; F:→ 4
-7: test 10 < I0; T:→ 9                                     // if n > 10 {
 8: return I1                                               // return i
-9: return I0                                               // return n
---
No constants
---
  public static loopOp3(I)I
   L0
    LINENUMBER 1 L0
    ILOAD 0
    IFGE L1
   L2
    LINENUMBER 2 L2
    ILOAD 0
    INEG
    ISTORE 0
   L1
    LINENUMBER 3 L1
   FRAME SAME
    ICONST_1
    ISTORE 1
   L3
    LINENUMBER 4 L3
   FRAME APPEND [I]
    ILOAD 1
    ICONST_1
    IADD
    ISTORE 1
   L4
    LINENUMBER 5 L4
    ILOAD 1
    IFLE L5
   L6
    LINENUMBER 6 L6
    ILOAD 0
    ILOAD 1
    IF_ICMPGE L3
   L5
    LINENUMBER 7 L5
   FRAME SAME
    ILOAD 0
    BIPUSH 10
    IF_ICMPGT L7
   L8
    LINENUMBER 8 L8
    ILOAD 1
    IRETURN
   L7
    LINENUMBER 9 L7
   FRAME CHOP 1
    ILOAD 0
    IRETURN
    MAXSTACK = 2
    MAXLOCALS = 2
